package com.ggp.utils.exploitability;

import com.ggp.IGameDescription;
import com.ggp.IStrategy;
import com.ggp.utils.recall.PerfectRecallGame;
import com.ggp.utils.strategy.Strategy;

public class ExploitabilityUtils {
    /**
     * Helper method for exploitability computation.
     *
     * Avoids unnecessary perfect-recall wrapping if the game already has perfect-recall.
     * @param normalizedStratForBothPlayers normalized strategy for both players
     * @param gameDescription target game
     * @return exploitability
     */
    public static double computeExploitability(IStrategy normalizedStratForBothPlayers, IGameDescription gameDescription) {
        return computeExploitability(normalizedStratForBothPlayers, gameDescription, null);
    }

    /**
     * Helper method for exploitability computation which also returns best-response strategy.
     *
     * Avoids unnecessary perfect-recall wrapping if the game already has perfect-recall.
     * @param normalizedStratForBothPlayers normalized strategy for both players
     * @param gameDescription target game
     * @param outBestResponseStrategy output argument which will be filled with  perfect-recall best response strategy for both players
     * @return exploitability
     */
    public static double computeExploitability(IStrategy normalizedStratForBothPlayers, IGameDescription gameDescription, Strategy outBestResponseStrategy) {
        if (gameDescription.getClass().isAnnotationPresent(PerfectRecallGame.class)) {
            return PerfectRecallExploitability.computeExploitability(normalizedStratForBothPlayers, gameDescription, outBestResponseStrategy);
        } else {
            return ImperfectRecallExploitability.computeExploitability(normalizedStratForBothPlayers, gameDescription, outBestResponseStrategy);
        }
    }
}
