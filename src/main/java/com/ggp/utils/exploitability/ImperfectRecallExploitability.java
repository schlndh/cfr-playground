package com.ggp.utils.exploitability;

import com.ggp.*;
import com.ggp.utils.InformationSetWrapper;
import com.ggp.utils.recall.PerfectRecallGameDescriptionWrapper;
import com.ggp.utils.strategy.Strategy;

public class ImperfectRecallExploitability {
    public static double computeExploitability(IStrategy normalizedStratForBothPlayers, IGameDescription gameDescription) {
        return computeExploitability(normalizedStratForBothPlayers, gameDescription.getInitialState(), null);
    }

    public static double computeExploitability(IStrategy normalizedStratForBothPlayers, IGameDescription gameDescription, Strategy outBestResponseStrategy) {
        return computeExploitability(normalizedStratForBothPlayers, gameDescription.getInitialState(), outBestResponseStrategy);
    }

    public static double computeExploitability(IStrategy normalizedStratForBothPlayers, ICompleteInformationState initialState) {
        return computeExploitability(normalizedStratForBothPlayers, initialState, null);
    }

    /**
     * Computes exploitability and best response strategy
     * @param normalizedStratForBothPlayers
     * @param initialState
     * @param outBestResponseStrategy strategy into which best response will be written (strategy will be for perfect-recall wrapper of the orginal game)
     * @return
     */
    public static double computeExploitability(IStrategy normalizedStratForBothPlayers, ICompleteInformationState initialState, Strategy outBestResponseStrategy) {
        IStrategy perfRecallStrategy = new IStrategy() {
            private IInformationSet getOrigInfoSet(IInformationSet is) {
                InformationSetWrapper pris = (InformationSetWrapper) is;
                return pris.getOrigInfoSet();
            }

            @Override
            public Iterable<IInformationSet> getDefinedInformationSets() {
                throw new RuntimeException("Not implemented");
            }

            @Override
            public boolean isDefined(IInformationSet is) {
                return normalizedStratForBothPlayers.isDefined(getOrigInfoSet(is));
            }

            @Override
            public IInfoSetStrategy getInfoSetStrategy(IInformationSet is) {
                return normalizedStratForBothPlayers.getInfoSetStrategy(getOrigInfoSet(is));
            }
        };
        return PerfectRecallExploitability.computeExploitability(perfRecallStrategy, PerfectRecallGameDescriptionWrapper.wrapInitialState(initialState), outBestResponseStrategy);
    }
}
